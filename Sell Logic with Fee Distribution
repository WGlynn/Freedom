pub fn sell(ctx: Context<Sell>, amount_in: u64) -> Result<()> {
    let pool = &mut ctx.accounts.pool;

    // Calculate current market cap
    let price = bonding_curve_price(pool.token_supply, pool.curve_constant, pool.curve_exponent);
    pool.market_cap = price * pool.token_supply;

    // Calculate fee in SOL
    let total_fee_in_sol = calculate_fee_in_sol(
        pool.market_cap,
        pool.fee_max,
        pool.market_cap_min,
        pool.decay_rate,
        amount_in,
        pool,
    )?;

    // Distribute fee to treasury and LPs
    distribute_fee(ctx, total_fee_in_sol, pool)?;

    // Transfer remaining tokens to the user after deducting the SPL token fee
    let amount_after_fee = amount_in - (total_fee_in_sol / get_spl_to_sol_price()? as u64);
    token::transfer(ctx.accounts.user_ctx(), amount_after_fee)?;

    Ok(())
}
