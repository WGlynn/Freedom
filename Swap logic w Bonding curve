pub fn swap(ctx: Context<Swap>, amount_in: u64) -> Result<()> {
    let pool = &mut ctx.accounts.pool;
    let token_supply = pool.token_supply;
    let k = pool.curve_constant;
    let n = pool.curve_exponent;

    // Calculate token price before the swap
    let price_before = bonding_curve_price(token_supply, k, n);

    // Update token supply based on swap
    pool.token_supply += amount_in;

    // Calculate token price after the swap
    let price_after = bonding_curve_price(pool.token_supply, k, n);

    // Ensure liquidity lock
    let locked_liq = locked_liquidity(pool.token_supply, k, n);
    if pool.liquidity < locked_liq {
        return Err(ErrorCode::InsufficientLiquidity.into());
    }

    // Transfer tokens
    token::transfer(ctx.accounts.transfer_ctx(), amount_out)?;
    Ok(())
}
